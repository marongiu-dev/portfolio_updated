import"./style.css";import*as dat from"dat.gui";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GLTFLoader}from"three/examples/jsm/loaders/GLTFLoader.js";import{DRACOLoader}from"three/examples/jsm/loaders/DRACOLoader.js";import firefliesVertexShader from"./shaders/fireflies/vertex.glsl";import firefliesFragmentShader from"./shaders/fireflies/fragment.glsl";import portalVertexShader from"./shaders/portal/vertex.glsl";import portalFragmentShader from"./shaders/portal/fragment.glsl";const debugObject={},gui=new dat.GUI({width:400});dat.GUI.toggleHide();const canvas=document.querySelector("canvas.webgl"),scene=new THREE.Scene,textureLoader=new THREE.TextureLoader,dracoLoader=new DRACOLoader;dracoLoader.setDecoderPath("draco/");const gltfLoader=new GLTFLoader;gltfLoader.setDRACOLoader(dracoLoader);const bakedTexture=textureLoader.load("my_baked.jpg");bakedTexture.flipY=!1,bakedTexture.encoding=THREE.sRGBEncoding;const bakedMaterial=new THREE.MeshBasicMaterial({map:bakedTexture});debugObject.portalColorStart="#006b00",debugObject.portalColorEnd="#ffffff",gui.addColor(debugObject,"portalColorStart").onChange((()=>{portalLightMaterial.uniforms.uColorStart.value.set(debugObject.portalColorStart)})),gui.addColor(debugObject,"portalColorEnd").onChange((()=>{portalLightMaterial.uniforms.uColorEnd.value.set(debugObject.portalColorEnd)}));const portalLightMaterial=new THREE.ShaderMaterial({uniforms:{uTime:{value:0},uColorStart:{value:new THREE.Color(debugObject.portalColorStart)},uColorEnd:{value:new THREE.Color(debugObject.portalColorEnd)}},vertexShader:portalVertexShader,fragmentShader:portalFragmentShader}),poleLightMaterial=new THREE.MeshBasicMaterial({color:16777189});gltfLoader.load("portal_THREE.glb",(e=>{const r=e.scene.children.find((e=>"baked"===e.name)),t=e.scene.children.find((e=>"portalLight"===e.name)),i=e.scene.children.find((e=>"poleLightA"===e.name)),a=e.scene.children.find((e=>"poleLightB"===e.name));r.material=bakedMaterial,t.material=portalLightMaterial,i.material=poleLightMaterial,a.material=poleLightMaterial,scene.add(e.scene)}));const firefliesGeometry=new THREE.BufferGeometry,firefliesCount=30,positionArray=new Float32Array(90),scaleArray=new Float32Array(30);for(let e=0;e<30;e++)positionArray[3*e+0]=4*(Math.random()-.5),positionArray[3*e+1]=1.6*Math.random(),positionArray[3*e+2]=4*(Math.random()-.5),scaleArray[e]=Math.random();firefliesGeometry.setAttribute("position",new THREE.BufferAttribute(positionArray,3)),firefliesGeometry.setAttribute("aScale",new THREE.BufferAttribute(scaleArray,1));const firefliesMaterial=new THREE.ShaderMaterial({uniforms:{uTime:{value:0},uPixelRatio:{value:Math.min(window.devicePixelRatio,2)},uSize:{value:500}},vertexShader:firefliesVertexShader,fragmentShader:firefliesFragmentShader,transparent:!0,blending:THREE.AdditiveBlending,depthWrite:!1});gui.add(firefliesMaterial.uniforms.uSize,"value").min(0).max(500).step(1).name("firefliesSize");const fireflies=new THREE.Points(firefliesGeometry,firefliesMaterial);scene.add(fireflies);const sizes={width:700,height:733};window.addEventListener("resize",(()=>{window.innerWidth>=1640?(sizes.width=800,sizes.height=700):window.innerWidth>=1437&&window.innerWidth<1640?(sizes.width=700,sizes.height=700):window.innerWidth>=1230&&window.innerWidth<=1437?(sizes.width=500,sizes.height=600):window.innerWidth>=673&&window.innerWidth<1231?(sizes.width=400,sizes.height=500):window.innerWidth>=400&&window.innerWidth<673?(sizes.width=300,sizes.height=450):window.innerWidth<400&&(sizes.width=250,sizes.height=320),console.log(window.innerWidth),camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),firefliesMaterial.uniforms.uPixelRatio.value=Math.min(window.devicePixelRatio,2)}));const camera=new THREE.PerspectiveCamera(60,sizes.width/sizes.height,.1,100);camera.position.x=1.9,camera.position.y=2.5,camera.position.z=3.2,scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.enableDamping=!0,controls.dampingFactor=.1,controls.rotateSpeed=.15,controls.zoomSpeed=.2,controls.maxDistance=!0,controls.maxDistance=4,controls.maxPolarAngle=!0;var centerPosition=controls.target.clone();centerPosition.y=0;var groundPosition=camera.position.clone();groundPosition.y=0;var d=centerPosition.distanceTo(groundPosition),origin=new THREE.Vector2(controls.target.y,0),remote=new THREE.Vector2(0,d),angleRadians=Math.atan2(remote.y-origin.y,remote.x-origin.x);controls.maxPolarAngle=angleRadians-.15;const renderer=new THREE.WebGLRenderer({canvas,antialias:!0});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),renderer.outputEncoding=THREE.sRGBEncoding,debugObject.clearColor="#321941",renderer.setClearColor(debugObject.clearColor),gui.addColor(debugObject,"clearColor").onChange((()=>{renderer.setClearColor(debugObject.clearColor)}));const clock=new THREE.Clock,tick=()=>{const e=clock.getElapsedTime();portalLightMaterial.uniforms.uTime.value=e,firefliesMaterial.uniforms.uTime.value=e,controls.update(),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();